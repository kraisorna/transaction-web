// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactionEntity.Models;

namespace TransactionEntity.Migrations
{
    [DbContext(typeof(TransactionDatabaseContext))]
    partial class TransactionDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransactionEntity.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionIdentificator")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TransactionImportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionImportId")
                        .IsUnique();

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("TransactionEntity.Models.TransactionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileStatus")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UploadDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TransactionFile");
                });

            modelBuilder.Entity("TransactionEntity.Models.TransactionImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<DateTimeOffset>("ImportDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ImportStatus")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<DateTimeOffset?>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TransactionFileId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TransactionFileId");

                    b.ToTable("TransactionImport");
                });

            modelBuilder.Entity("TransactionEntity.Models.Transaction", b =>
                {
                    b.HasOne("TransactionEntity.Models.TransactionImport", "TransactionImport")
                        .WithOne("Transaction")
                        .HasForeignKey("TransactionEntity.Models.Transaction", "TransactionImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransactionEntity.Models.TransactionImport", b =>
                {
                    b.HasOne("TransactionEntity.Models.TransactionFile", "TransactionFile")
                        .WithMany("Imports")
                        .HasForeignKey("TransactionFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
